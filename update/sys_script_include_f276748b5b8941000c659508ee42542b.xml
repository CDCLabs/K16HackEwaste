<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access/>
        <active>true</active>
        <api_name>x_snc_ewaste.ScannerUtil</api_name>
        <client_callable>true</client_callable>
        <description/>
        <name>ScannerUtil</name>
        <script><![CDATA[var ScannerUtil = Class.create();
ScannerUtil.prototype = Object.extendsObject(AbstractAjaxProcessor, {
   
   applyUpdateTemplate: function(targetGR, templateGR) {
      
      var update_specs = templateGR.template.split('^');
      for (var i = 0; i < update_specs.length - 1; i++) {  // Last entry is an EQ string, not a field name=value spec, so skip it
         var update = update_specs[i].split('=');
      if (update.length == 2) {
         if (targetGR[update[0]] != undefined && targetGR[update[0]] != 'asset_tag' ) {
            targetGR[update[0]] = update[1];
         }
      }
   }
},

enter: function() {
   
   var template_id = this.getParameter('sysparm_template');
   var operation_id = this.getParameter('sysparm_op');
   var record_key = this.getParameter('sysparm_key');
   var aux_field_1 = this.getParameter('sysparm_aux_field_1');
   
   
   // Get template info
   var t = new GlideRecord('sys_template');
   if (!t.get(template_id)) {
      return "failure:Invalid template id!";
   }
   var template_name = t.name;
   var table_name = t.table;
   
   //gs.log("Template: " + template_id + "(" + t.name + "), Table: " + table_name + ", Op: " + operation_id + ", and key: " + record_key);
   
   var validator = new TableUtils(table_name);
   if (!validator.tableExists()) {
      return "failure:Table " + table_name + " does not exist!";
   }
   
   var gr = new GlideRecord(table_name);
   gr.addQuery("asset_tag", record_key);  // Assets and CIs both have Asset tags
   gr.query();
   
   var was_inserted = false;
   var record_sys_id = 0;
   if ('insert' == operation_id) {
      if (gr.hasNext()) {
         gr.next();
         return "failure_link:" + table_name + '.do?sys_id=' + gr.sys_id.toString() + ":" + record_key + ":already exists in the database!";
      }
      gr.initialize();
      gr.applyTemplate(template_name);
      gr.asset_tag = record_key;  // ensure asset_tag is correct (override template if defined there)
      if (aux_field_1)
         gr.serial_number = aux_field_1;  // Should lookup field from barcode scanning properties!  FIXME:
      record_sys_id = gr.insert();
      was_inserted = true;
      
   }
   else if ('update' == operation_id) {
      if (!gr.hasNext())
         return "failure:Asset tag " + record_key + " does not yet exist in the database!";
      gr.next();
      record_sys_id = gr.sys_id.toString();
      this.applyUpdateTemplate(gr, t);
      if (aux_field_1)
         gr.serial_number = aux_field_1;  // Should lookup field from barcode scanning properties!  FIXME:
      gr.update();
   }
   else if ('insert_update' == operation_id) {
      if (gr.hasNext()) {
         gr.next();
         record_sys_id = gr.sys_id.toString();
         this.applyUpdateTemplate(gr, t);
         if (aux_field_1)
            gr.serial_number = aux_field_1;  // Should lookup field from barcode scanning properties!  FIXME:
         gr.update();
      }
      else {
         gr.initialize();
         gr.applyTemplate(template_name);
         gr.asset_tag = record_key;
         if (aux_field_1)
            gr.serial_number = aux_field_1;  // Should lookup field from barcode scanning properties!  FIXME:
         record_sys_id = gr.insert();
         was_inserted = true;
      }
   }
   else {
      return "failure:" + operation_id + " is an invalid operation id!";
   }
   
   if (was_inserted) {
      return "success:" + table_name + '.do?sys_id=' + record_sys_id + ":" + record_key + ":inserted"
   }
   else {
      return "success:" + table_name + '.do?sys_id=' + record_sys_id + ":" + record_key +  ":updated"
   }
   
},

type: 'ScannerUtil'
});

]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>dave.knight</sys_created_by>
        <sys_created_on>2013-05-04 13:31:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>f276748b5b8941000c659508ee42542b</sys_id>
        <sys_mod_count>43</sys_mod_count>
        <sys_name>ScannerUtil</sys_name>
        <sys_package display_value="EWaste" source="x_snc_ewaste">c9a0de8813631200d6c753173244b0d8</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="EWaste">c9a0de8813631200d6c753173244b0d8</sys_scope>
        <sys_update_name>sys_script_include_f276748b5b8941000c659508ee42542b</sys_update_name>
        <sys_updated_by>dave.knight</sys_updated_by>
        <sys_updated_on>2013-07-03 21:35:51</sys_updated_on>
    </sys_script_include>
</record_update>
